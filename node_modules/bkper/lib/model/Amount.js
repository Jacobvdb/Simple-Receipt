"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Amount = void 0;
const big_js_1 = __importDefault(require("big.js"));
/**
 * This class defines an Amount for arbitrary-precision decimal arithmetic.
 *
 * It inherits methods from [big.js](http://mikemcl.github.io/big.js/) library
 *
 * @public
 */
class Amount {
    /**
     * The Amount constructor.
     */
    constructor(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            this.wrapped = new big_js_1.default(n);
        }
        else if (n instanceof Amount) {
            this.wrapped = new big_js_1.default(n.wrapped);
        }
        else if (n.toString) {
            this.wrapped = new big_js_1.default(n.toString());
        }
        else {
            this.wrapped = new big_js_1.default(+n);
        }
    }
    /**
     * Returns an absolute Amount.
     */
    abs() {
        let big = this.wrapped.abs();
        return this.wrap(big);
    }
    /**
     * Compare
     */
    cmp(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.cmp(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.cmp(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.cmp(n.toString());
        }
        else {
            return this.wrapped.cmp(+n);
        }
    }
    /**
     * Divide by
     */
    div(n) {
        this.checkNumberNotNull(n);
        let big;
        if (typeof n == "string") {
            big = this.wrapped.div(n);
        }
        else if (n instanceof Amount) {
            big = this.wrapped.div(n.wrapped);
        }
        else if (n.toString) {
            big = this.wrapped.div(n.toString());
        }
        else {
            big = this.wrapped.div(+n);
        }
        return this.wrap(big);
    }
    /**
     * Equals to
     */
    eq(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.eq(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.eq(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.eq(n.toString());
        }
        else {
            return this.wrapped.eq(+n);
        }
    }
    /**
     * Greater than
     */
    gt(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.gt(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.gt(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.gt(n.toString());
        }
        else {
            return this.wrapped.gt(+n);
        }
    }
    /**
     * Greater than or equal
     */
    gte(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.gte(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.gte(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.gte(n.toString());
        }
        else {
            return this.wrapped.gte(+n);
        }
    }
    /**
     * Less than
     */
    lt(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.lt(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.lt(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.lt(n.toString());
        }
        else {
            return this.wrapped.lt(+n);
        }
    }
    /**
     * Less than or equal to
     */
    lte(n) {
        this.checkNumberNotNull(n);
        if (typeof n == "string") {
            return this.wrapped.lte(n);
        }
        else if (n instanceof Amount) {
            return this.wrapped.lte(n.wrapped);
        }
        else if (n.toString) {
            return this.wrapped.lte(n.toString());
        }
        else {
            return this.wrapped.lte(+n);
        }
    }
    /**
     * Sum
     */
    plus(n) {
        this.checkNumberNotNull(n);
        let big;
        if (typeof n == "string") {
            big = this.wrapped.plus(n);
        }
        else if (n instanceof Amount) {
            big = this.wrapped.plus(n.wrapped);
        }
        else if (n.toString) {
            big = this.wrapped.plus(n.toString());
        }
        else {
            big = this.wrapped.plus(+n);
        }
        return this.wrap(big);
    }
    /**
     * Minus
     */
    minus(n) {
        this.checkNumberNotNull(n);
        let big;
        if (typeof n == "string") {
            big = this.wrapped.minus(n);
        }
        else if (n instanceof Amount) {
            big = this.wrapped.minus(n.wrapped);
        }
        else if (n.toString) {
            big = this.wrapped.minus(n.toString());
        }
        else {
            big = this.wrapped.minus(+n);
        }
        return this.wrap(big);
    }
    /**
     * Modulo - the integer remainder of dividing this Amount by n.
     *
     * Similar to % operator
     *
     */
    mod(n) {
        this.checkNumberNotNull(n);
        let big;
        if (typeof n == "string") {
            big = this.wrapped.mod(n);
        }
        else if (n instanceof Amount) {
            big = this.wrapped.mod(n.wrapped);
        }
        else if (n.toString) {
            big = this.wrapped.mod(n.toString());
        }
        else {
            big = this.wrapped.mod(+n);
        }
        return this.wrap(big);
    }
    /**
     * Round to a maximum of dp decimal places.
     */
    round(dp) {
        let big = this.wrapped.round(dp);
        return this.wrap(big);
    }
    /**
     * Multiply
     */
    times(n) {
        this.checkNumberNotNull(n);
        let big;
        if (typeof n == "string") {
            big = this.wrapped.times(n);
        }
        else if (n instanceof Amount) {
            big = this.wrapped.times(n.wrapped);
        }
        else if (n.toString) {
            big = this.wrapped.times(n.toString());
        }
        else {
            big = this.wrapped.times(+n);
        }
        return this.wrap(big);
    }
    /**
     * Returns a string representing the value of this Amount in normal notation to a fixed number of decimal places dp.
     */
    toFixed(dp) {
        return this.wrapped.toFixed(dp);
    }
    /**
     * Returns a string representing the value of this Amount.
     */
    toString() {
        return this.wrapped.toString();
    }
    /**
     * Returns a primitive number representing the value of this Amount.
     */
    toNumber() {
        return this.wrapped.toNumber();
    }
    /** @internal */
    checkNumberNotNull(amount) {
        if (amount == null) {
            throw new Error(`Invalid number: null`);
        }
    }
    /** @internal */
    static create() {
        return Object.create(this.prototype);
    }
    /** @internal */
    wrap(big) {
        let amount = Amount.create();
        amount.wrapped = big;
        return amount;
    }
}
exports.Amount = Amount;
//# sourceMappingURL=Amount.js.map