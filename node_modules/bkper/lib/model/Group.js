"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = void 0;
const GroupService = __importStar(require("../service/group-service"));
const utils_1 = require("../utils");
const Account_1 = require("./Account");
const Utils = __importStar(require("../utils"));
/**
 * This class defines a Group of [[Accounts]].
 *
 * Accounts can be grouped by different meaning, like Expenses, Revenue, Assets, Liabilities and so on
 *
 * Its useful to keep organized and for high level analysis.
 *
 * @public
 */
class Group {
    /**
     *
     * @returns The wrapped plain json object
     */
    json() {
        return this.wrapped;
    }
    /**
     * @returns The id of this Group
     */
    getId() {
        return this.wrapped.id;
    }
    /**
     * @returns The parent Group
     */
    getParent() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.wrapped.parent) {
                return yield this.book.getGroup(this.wrapped.parent.id);
            }
            else {
                return null;
            }
        });
    }
    /**
     * Sets the parent Group.
     *
     * @returns This Group, for chainning.
     */
    setParent(group) {
        if (group) {
            this.wrapped.parent = { id: group.getId(), name: group.getName(), normalizedName: group.getNormalizedName() };
        }
        else {
            this.wrapped.parent = null;
        }
        return this;
    }
    /**
     * @returns The name of this Group
     */
    getName() {
        return this.wrapped.name;
    }
    /**
     * Sets the name of the Group.
     *
     * @returns This Group, for chainning.
     */
    setName(name) {
        this.wrapped.name = name;
        return this;
    }
    /**
     * @returns The name of this group without spaces and special characters
     */
    getNormalizedName() {
        if (this.wrapped.normalizedName) {
            return this.wrapped.normalizedName;
        }
        else {
            return utils_1.normalizeText(this.getName());
        }
    }
    /**
     * @returns All Accounts of this group.
     */
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            let accountsPlain = yield GroupService.getAccounts(this.book.getId(), this.getId());
            if (!accountsPlain) {
                return [];
            }
            let accounts = Utils.wrapObjects(new Account_1.Account(), accountsPlain);
            for (const account of accounts) {
                account.book = this.book;
            }
            return accounts;
        });
    }
    /**
     * @returns True if this group has any account in it
     */
    hasAccounts() {
        return this.wrapped.hasAccounts;
    }
    /**
     * @returns The type for of the accounts of this group. Null if mixed
     */
    getType() {
        return this.wrapped.type;
    }
    /**
     * Gets the custom properties stored in this Group
     */
    getProperties() {
        return this.wrapped.properties != null ? Object.assign({}, this.wrapped.properties) : {};
    }
    /**
     * Sets the custom properties of the Group
     *
     * @param properties - Object with key/value pair properties
     *
     * @returns This Group, for chainning.
     */
    setProperties(properties) {
        this.wrapped.properties = Object.assign({}, properties);
        return this;
    }
    /**
     * Gets the property value for given keys. First property found will be retrieved
     *
     * @param keys - The property key
     */
    getProperty(...keys) {
        for (let index = 0; index < keys.length; index++) {
            const key = keys[index];
            let value = this.wrapped.properties != null ? this.wrapped.properties[key] : null;
            if (value != null && value.trim() != '') {
                return value;
            }
        }
        return null;
    }
    /**
     * Sets a custom property in the Group.
     *
     * @param key - The property key
     * @param value - The property value
     */
    setProperty(key, value) {
        if (key == null || key.trim() == '') {
            return this;
        }
        if (this.wrapped.properties == null) {
            this.wrapped.properties = {};
        }
        this.wrapped.properties[key] = value;
        return this;
    }
    /**
     * Delete a custom property
     *
     * @param key - The property key
     *
     * @returns This Group, for chainning.
     */
    deleteProperty(key) {
        this.setProperty(key, null);
        return this;
    }
    /**
     * Tell if the Group is hidden on main transactions menu
     */
    isHidden() {
        return this.wrapped.hidden;
    }
    /**
     *  Hide/Show group on main menu.
     */
    setHidden(hidden) {
        this.wrapped.hidden = hidden;
        return this;
    }
    /**
     * Perform create new group.
     */
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            this.wrapped = yield GroupService.createGroup(this.book.getId(), this.wrapped);
            this.book.updateGroupCache(this);
            return this;
        });
    }
    /**
     * Perform update group, applying pending changes.
     */
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            this.wrapped = yield GroupService.updateGroup(this.book.getId(), this.wrapped);
            this.book.updateGroupCache(this);
            return this;
        });
    }
    /**
     * Perform delete group.
     */
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            this.wrapped = yield GroupService.deleteGroup(this.book.getId(), this.wrapped);
            this.book.removeGroupCache(this);
            return this;
        });
    }
}
exports.Group = Group;
//# sourceMappingURL=Group.js.map