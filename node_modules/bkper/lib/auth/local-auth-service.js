"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOAuthToken = exports.isLoggedIn = exports.logout = exports.login = void 0;
const local_auth_1 = require("@google-cloud/local-auth");
const fs_1 = __importDefault(require("fs"));
const google_auth_library_1 = require("google-auth-library");
const os_1 = __importDefault(require("os"));
const keys = require(`${__dirname}/keys.json`);
let storedCredentials;
const storedCredentialsPath = `${os_1.default.homedir}/.bkper-credentials.json`;
try {
    let credentialsJson = fs_1.default.readFileSync(storedCredentialsPath, 'utf8');
    storedCredentials = JSON.parse(credentialsJson);
}
catch (err) {
    console.log('No local credentials found.');
}
function login() {
    return __awaiter(this, void 0, void 0, function* () {
        if (storedCredentials) {
            console.log('Bkper already logged in.');
        }
        yield getOAuthToken();
    });
}
exports.login = login;
function logout() {
    if (fs_1.default.existsSync(storedCredentialsPath)) {
        fs_1.default.unlinkSync(storedCredentialsPath);
    }
    console.log('Bkper logged out.');
}
exports.logout = logout;
function isLoggedIn() {
    return storedCredentials != null;
}
exports.isLoggedIn = isLoggedIn;
function getOAuthToken() {
    return __awaiter(this, void 0, void 0, function* () {
        let localAuth;
        if (storedCredentials) {
            localAuth = new google_auth_library_1.OAuth2Client(keys.installed.client_id, keys.installed.client_secret, keys.installed.redirect_uris[0]);
            localAuth.setCredentials(storedCredentials);
        }
        else {
            localAuth = yield local_auth_1.authenticate({
                scopes: ['https://www.googleapis.com/auth/userinfo.email'],
                keyfilePath: `${__dirname}/keys.json`,
            });
            storeCredentials(localAuth.credentials);
        }
        localAuth.on('tokens', (tokens) => {
            if (tokens.refresh_token) {
                // store the refresh_token in my database!
                console.log(tokens.refresh_token);
                storeCredentials(tokens);
            }
        });
        let token = yield localAuth.getAccessToken();
        return token.token;
    });
}
exports.getOAuthToken = getOAuthToken;
function storeCredentials(credentials) {
    storedCredentials = credentials;
    fs_1.default.writeFileSync(storedCredentialsPath, JSON.stringify(credentials, null, 4), 'utf8');
}
//# sourceMappingURL=local-auth-service.js.map