#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const local_auth_service_1 = require("./auth/local-auth-service");
const Bkper_1 = require("./model/Bkper");
const utils_1 = require("./utils");
var fs = require('fs');
require('dotenv').config();
process.env.NODE_ENV = utils_1.NODE_ENV_DEV;
commander_1.default
    .command('login')
    .description('Login Bkper')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    yield local_auth_service_1.login();
}));
commander_1.default
    .command('logout')
    .description('Logout Bkper')
    .action((todo) => {
    local_auth_service_1.logout();
});
commander_1.default
    .command('app')
    .description('Create/Update an App')
    .option('-u, --update', 'Update the App')
    .option('-c, --create', 'Create a new App')
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let app = Bkper_1.Bkper.setApiKey(process.env.BKPER_API_KEY)
            .setJson(JSON.parse(fs.readFileSync('./bkperapp.json', 'utf8')))
            .setReadme(fs.readFileSync('./README.md', 'utf8'))
            .setClientSecret(process.env.BKPER_CLIENT_SECRET)
            .setDeveloperEmail(process.env.BKPER_DEVELOPER_EMAIL)
            .setUserEmails(process.env.BKPER_USER_EMAILS);
        if (options.update) {
            app = yield app.update();
            console.log(`Updated ${app.getId()} sucessfully.`);
        }
        else if (options.create) {
            app = yield app.create();
            console.log(`Created ${app.getId()} sucessfully.`);
        }
    }
    catch (err) {
        console.log(err);
    }
}));
commander_1.default.parse(process.argv);
//# sourceMappingURL=cli.js.map