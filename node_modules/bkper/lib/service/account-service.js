"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccount = exports.createAccounts = exports.deleteAccount = exports.updateAccount = exports.createAccount = void 0;
const HttpApiRequest_1 = require("./HttpApiRequest");
function createAccount(bookId, account) {
    return __awaiter(this, void 0, void 0, function* () {
        var payload = JSON.stringify(account);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/accounts`).setMethod('POST').setPayload(payload).fetch();
        return response.data;
    });
}
exports.createAccount = createAccount;
function updateAccount(bookId, account) {
    return __awaiter(this, void 0, void 0, function* () {
        var payload = JSON.stringify(account);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/accounts`).setMethod('PUT').setPayload(payload).fetch();
        return response.data;
    });
}
exports.updateAccount = updateAccount;
function deleteAccount(bookId, account) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/accounts/${account.id}`).setMethod('DELETE').fetch();
        return response.data;
    });
}
exports.deleteAccount = deleteAccount;
function createAccounts(bookId, accounts) {
    return __awaiter(this, void 0, void 0, function* () {
        let accountList = {
            items: accounts
        };
        var accountSaveBatchJSON = JSON.stringify(accountList);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/accounts/batch`).setMethod('POST').setPayload(accountSaveBatchJSON).fetch();
        var accountsPlain = yield response.data;
        if (accountsPlain.items == null) {
            return [];
        }
        return accountsPlain;
    });
}
exports.createAccounts = createAccounts;
function getAccount(bookId, idOrName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/accounts/${encodeURIComponent(idOrName)}`).setMethod('GET').fetch();
            return response.data;
        }
        catch (error) {
            return null;
        }
    });
}
exports.getAccount = getAccount;
//# sourceMappingURL=account-service.js.map