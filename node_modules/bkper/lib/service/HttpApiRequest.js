"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpBooksApiV4Request = exports.HttpBooksApiV2Request = exports.HttpApiRequest = void 0;
const local_auth_service_1 = require("../auth/local-auth-service");
const gaxios_1 = require("gaxios");
const https_1 = __importDefault(require("https"));
const utils_1 = require("../utils");
const httpsAgent = new https_1.default.Agent({ keepAlive: true });
class HttpApiRequest {
    constructor(path) {
        this.params = [];
        this.headers = {};
        this.method = 'GET';
        this.payload = null;
        this.url = `https://app.bkper.com/_ah/api/bkper/${path}`;
    }
    setMethod(method) {
        this.method = method;
        return this;
    }
    setHeader(name, value) {
        this.headers[name] = value;
        return this;
    }
    addParam(name, value) {
        this.params.push({ name, value });
        return this;
    }
    setPayload(payload) {
        this.payload = payload;
        return this;
    }
    /**
   * Gets the result url, with query params appended.
   */
    getUrl() {
        let url = this.url;
        if (this.params != null) {
            let i = 0;
            if (url.indexOf('?') < 0) {
                url += '?';
            }
            else {
                i++;
            }
            for (const param of this.params) {
                if (i > 0) {
                    url += "&";
                }
                var key = param.name;
                var value = param.value;
                if (value != null) {
                    url += key + "=" + encodeURIComponent(value);
                    i++;
                }
            }
        }
        return url;
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            this.headers['Authorization'] = `Bearer ${yield getAccessToken()}`;
            this.addParam('key', HttpApiRequest.API_KEY);
            // this.httpRequest.setMuteHttpExceptions(true);
            const url = this.getUrl();
            try {
                return yield gaxios_1.request({
                    url: url,
                    method: this.method,
                    headers: this.headers,
                    body: this.payload,
                    agent: httpsAgent,
                    retryConfig: {
                        httpMethodsToRetry: ['GET', 'PUT', 'POST', 'PATCH', 'HEAD', 'OPTIONS', 'DELETE'],
                        statusCodesToRetry: [[100, 199], [429, 429], [500, 599]],
                        retry: process.env.NODE_ENV == utils_1.NODE_ENV_DEV ? 0 : 6,
                        onRetryAttempt: (err) => { console.log(`${err.message} - Retrying... `); },
                        retryDelay: 1000
                    }
                });
            }
            catch (e) {
                let error = e.response.data;
                if (error.error) {
                    throw `[${error.error.message}] calling url ${url}`;
                }
                else {
                    throw `[${e.message}] calling url ${url}`;
                }
            }
        });
    }
}
exports.HttpApiRequest = HttpApiRequest;
function getAccessToken() {
    return __awaiter(this, void 0, void 0, function* () {
        let token = null;
        if (HttpApiRequest.OAUTH_TOKEN_PROVIDER) {
            token = yield HttpApiRequest.OAUTH_TOKEN_PROVIDER();
        }
        if (local_auth_service_1.isLoggedIn() && token == null) {
            token = yield local_auth_service_1.getOAuthToken();
        }
        return token;
    });
}
class HttpBooksApiV2Request extends HttpApiRequest {
    constructor(service) {
        super(`v2/ledgers/${service}`);
    }
}
exports.HttpBooksApiV2Request = HttpBooksApiV2Request;
class HttpBooksApiV4Request extends HttpApiRequest {
    constructor(service) {
        super(`v4/books/${service}`);
    }
}
exports.HttpBooksApiV4Request = HttpBooksApiV4Request;
//# sourceMappingURL=HttpApiRequest.js.map