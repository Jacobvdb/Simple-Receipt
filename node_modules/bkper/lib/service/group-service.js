"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccounts = exports.getGroup = exports.getGroups = exports.createGroups = exports.deleteGroup = exports.updateGroup = exports.createGroup = void 0;
const HttpApiRequest_1 = require("./HttpApiRequest");
function createGroup(bookId, group) {
    return __awaiter(this, void 0, void 0, function* () {
        var payload = JSON.stringify(group);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups`).setMethod('POST').setPayload(payload).fetch();
        return response.data;
    });
}
exports.createGroup = createGroup;
function updateGroup(bookId, group) {
    return __awaiter(this, void 0, void 0, function* () {
        var payload = JSON.stringify(group);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups`).setMethod('PUT').setPayload(payload).fetch();
        return response.data;
    });
}
exports.updateGroup = updateGroup;
function deleteGroup(bookId, group) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups/${group.id}`).setMethod('DELETE').fetch();
        return response.data;
    });
}
exports.deleteGroup = deleteGroup;
function createGroups(bookId, groups) {
    return __awaiter(this, void 0, void 0, function* () {
        let groupList = {
            items: groups
        };
        var groupsBatchJSON = JSON.stringify(groupList);
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups/batch`).setMethod('POST').setPayload(groupsBatchJSON).fetch();
        if (response == null) {
            return [];
        }
        var groupsPlain = response.data;
        if (groupsPlain.items == null) {
            return [];
        }
        return groupsPlain.items;
    });
}
exports.createGroups = createGroups;
function getGroups(bookId) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups`).setMethod('GET').fetch();
        var groupsPlain = response.data;
        if (groupsPlain.items == null) {
            return [];
        }
        return groupsPlain.items;
    });
}
exports.getGroups = getGroups;
function getGroup(bookId, idOrName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups/${encodeURIComponent(idOrName)}`).setMethod('GET').fetch();
            return response.data;
        }
        catch (error) {
            return null;
        }
    });
}
exports.getGroup = getGroup;
function getAccounts(bookId, idOrName) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV4Request(`${bookId}/groups/${encodeURIComponent(idOrName)}/accounts`).setMethod('GET').fetch();
        var accountsPlain = response.data;
        if (accountsPlain.items == null) {
            return [];
        }
        return accountsPlain.items;
    });
}
exports.getAccounts = getAccounts;
//# sourceMappingURL=group-service.js.map