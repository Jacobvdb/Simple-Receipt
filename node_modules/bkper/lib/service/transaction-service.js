"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchTransactions = exports.getTransaction = exports.restoreTransaction = exports.trashTransaction = exports.uncheckTransaction = exports.checkTransaction = exports.postTransaction = exports.updateTransaction = exports.trashTransactionsBatch = exports.createTransactionsBatch = exports.createTransaction = void 0;
const HttpApiRequest_1 = require("./HttpApiRequest");
function createTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions`).setMethod('POST').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.createTransaction = createTransaction;
function createTransactionsBatch(bookId, transactions) {
    return __awaiter(this, void 0, void 0, function* () {
        let transactionList = {
            items: transactions
        };
        var payload = JSON.stringify(transactionList);
        let response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/batch`)
            .setMethod('POST')
            .setPayload(payload)
            .fetch();
        transactionList = yield response.data;
        return transactionList != null && transactionList.items != null ? transactionList.items : [];
    });
}
exports.createTransactionsBatch = createTransactionsBatch;
function trashTransactionsBatch(bookId, transactions) {
    return __awaiter(this, void 0, void 0, function* () {
        let transactionList = {
            items: transactions
        };
        var payload = JSON.stringify(transactionList);
        let response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/trash/batch`)
            .setMethod('PATCH')
            .setPayload(payload)
            .fetch();
        transactionList = yield response.data;
    });
}
exports.trashTransactionsBatch = trashTransactionsBatch;
function updateTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions`).setMethod('PUT').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.updateTransaction = updateTransaction;
function postTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/post`).setMethod('PATCH').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.postTransaction = postTransaction;
function checkTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/check`).setMethod('PATCH').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.checkTransaction = checkTransaction;
function uncheckTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/uncheck`).setMethod('PATCH').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.uncheckTransaction = uncheckTransaction;
function trashTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/trash`).setMethod('PATCH').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.trashTransaction = trashTransaction;
function restoreTransaction(bookId, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/restore`).setMethod('PATCH').setPayload(transaction).fetch();
        return response.data;
    });
}
exports.restoreTransaction = restoreTransaction;
function getTransaction(bookId, id) {
    return __awaiter(this, void 0, void 0, function* () {
        var response = yield new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions/${id}`).setMethod('GET').fetch();
        return response.data;
    });
}
exports.getTransaction = getTransaction;
function searchTransactions(bookId, query, limit, cursor) {
    return __awaiter(this, void 0, void 0, function* () {
        if (query == null) {
            query = "";
        }
        var request = new HttpApiRequest_1.HttpBooksApiV5Request(`${bookId}/transactions`);
        request.addParam('query', query);
        request.addParam('limit', limit);
        if (cursor != null) {
            request.setHeader('cursor', cursor);
        }
        var response = yield request.fetch();
        return response.data;
    });
}
exports.searchTransactions = searchTransactions;
//# sourceMappingURL=transaction-service.js.map